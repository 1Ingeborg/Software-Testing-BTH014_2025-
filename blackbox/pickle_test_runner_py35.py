import sys
import os
import pickle
import hashlib
from datetime import datetime

# === 设置模块路径 ===
current_dir = os.path.abspath(os.path.dirname(__file__))
data_dir = os.path.join(current_dir, 'Data')
if data_dir not in sys.path:
    sys.path.insert(0, data_dir)

# === 合并样本来源 ===
from equivalence_classes import get_equivalence_class_samples
from boundary_value_samples import get_boundary_value_samples
from fuzzing_samples import get_fuzz_samples
from white_dataset import get_whitebox_samples


def get_all_samples():
    samples = {}
    samples.update(get_equivalence_class_samples())
    samples.update(get_boundary_value_samples())
    samples.update(get_fuzz_samples(10))  # 添加 10 条模糊样本
    samples.update(get_whitebox_samples())
    return samples

def run_tests():
    samples = get_all_samples()

    # === Python 版本标识
    python_version = "py%d%d" % (sys.version_info.major, sys.version_info.minor)

    # === 输出目录设置
    output_dir = os.path.join(current_dir, ".hash_output")
    pkl_dir = os.path.join(output_dir, "pkl")
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
    if not os.path.exists(pkl_dir):
        os.makedirs(pkl_dir)

    output_file = os.path.join(output_dir, python_version + ".txt")

    print("\n[INFO] Running under Python", python_version)
    print("[INFO] Saving detailed pickle, hash, and .pkl files...\n")

    hash_results = {}

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write("# Hashes generated by %s at %s\n\n" % (python_version, datetime.now()))

        for name, obj in samples.items():
            try:
                # 1. 序列化并计算哈希
                serialized = pickle.dumps(obj, protocol=4)
                hex_serialized = serialized.hex()
                hash_value = hashlib.sha256(serialized).hexdigest()
                hash_results[name] = hash_value

                # 2. 写入信息
                f.write("[Object Name] %s\n" % name)
                f.write("Original   : %r\n" % (obj,))
                f.write("Pickled    : %s\n" % hex_serialized)
                f.write("SHA256     : %s\n\n" % hash_value)

                # 3. 保存 .pkl 文件
                pkl_filename = "%s-%s.pkl" % (python_version, name)
                with open(os.path.join(pkl_dir, pkl_filename), 'wb') as pkl_file:
                    pkl_file.write(serialized)

            except Exception as e:
                print("[ERROR] Failed to pickle %s: %s - %s" % (name, type(e).__name__, e))
                f.write("[Object Name] %s\n" % name)
                f.write("Original   : %r\n" % (obj,))
                f.write("ERROR      : %s: %s\n\n" % (type(e).__name__, e))

    print("[INFO] Hash and pickle details saved to:", output_file)
    print("[INFO] Raw .pkl files saved in:", pkl_dir)

    # === 版本之间哈希比对 ===
    print("\n[INFO] Checking for cross-version hash consistency...")

    for fname in os.listdir(output_dir):
        if fname.endswith(".txt") and fname != (python_version + ".txt"):
            path = os.path.join(output_dir, fname)
            with open(path, 'r', encoding='utf-8') as f:
                other_hashes = {}
                for line in f:
                    if line.startswith("[Object Name]"):
                        obj_name = line.split("]")[1].strip()
                    elif line.startswith("SHA256"):
                        obj_hash = line.split(":")[1].strip()
                        other_hashes[obj_name] = obj_hash

            mismatches = []
            for key in hash_results:
                if key in other_hashes and hash_results[key] != other_hashes[key]:
                    mismatches.append(key)

            if mismatches:
                print("[X] MISMATCH with %s: %s" % (fname, ", ".join(mismatches)))

            else:
                print("[OK] MATCH with %s" % fname)

if __name__ == "__main__":
    run_tests()
