import sys
import os
import pickle
import hashlib
from datetime import datetime

# === 设置模块路径 ===
current_dir = os.path.dirname(__file__)
data_dir = os.path.join(current_dir, 'Data')
sys.path.append(data_dir)

# === 合并样本来源 ===
from equivalence_classes import get_equivalence_class_samples
from boundary_value_samples import get_boundary_value_samples
from fuzzing_samples import get_fuzz_samples  
from white_dataset import get_whitebox_samples

def get_all_samples():
    samples = {}
    samples.update(get_equivalence_class_samples())
    samples.update(get_boundary_value_samples())
    samples.update(get_fuzz_samples(10))   # ✅ 加入 10 条模糊样本
    samples.update(get_whitebox_samples())
    return samples


def run_tests():
    samples = get_all_samples()
    python_version = f"py{sys.version_info.major}{sys.version_info.minor}"
    output_dir = os.path.join(current_dir, ".hash_output")
    pkl_dir = os.path.join(output_dir, "pkl")
    os.makedirs(output_dir, exist_ok=True)
    os.makedirs(pkl_dir, exist_ok=True)

    output_file = os.path.join(output_dir, f"{python_version}.txt")

    print(f"\n[INFO] Running under Python {python_version}")
    print("[INFO] Saving detailed pickle, hash, and .pkl files...\n")

    hash_results = {}

    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(f"# Hashes generated by {python_version} at {datetime.now()}\n\n")

        for name, obj in samples.items():
            try:
                # 1. 序列化
                serialized = pickle.dumps(obj, protocol=4)
                hex_serialized = serialized.hex()
                hash_value = hashlib.sha256(serialized).hexdigest()
                hash_results[name] = hash_value

                # 2. 写入文本信息
                f.write(f"[Object Name] {name}\n")
                f.write(f"Original   : {repr(obj)}\n")
                f.write(f"Pickled    : {hex_serialized}\n")
                f.write(f"SHA256     : {hash_value}\n\n")

                # 3. 输出 .pkl 文件
                pkl_filename = f"{python_version}-{name}.pkl"
                with open(os.path.join(pkl_dir, pkl_filename), 'wb') as pkl_file:
                    pkl_file.write(serialized)

            except Exception as e:
                print(f"[ERROR] Failed to pickle {name}: {type(e).__name__} - {e}")
                f.write(f"[Object Name] {name}\n")
                f.write(f"Original   : {repr(obj)}\n")
                f.write(f"ERROR      : {type(e).__name__}: {e}\n\n")

    print(f"[INFO] Hash and pickle details saved to: {output_file}")
    print(f"[INFO] Raw .pkl files saved in: {pkl_dir}")

    # === 版本之间比对 ===
    print("\n[INFO] Checking for cross-version hash consistency...")

    for fname in os.listdir(output_dir):
        if fname.endswith(".txt") and fname != f"{python_version}.txt":
            path = os.path.join(output_dir, fname)
            with open(path, 'r', encoding='utf-8') as f:
                other_hashes = {}
                for line in f:
                    if line.startswith("[Object Name]"):
                        obj_name = line.split("]")[1].strip()
                    elif line.startswith("SHA256"):
                        obj_hash = line.split(":")[1].strip()
                        other_hashes[obj_name] = obj_hash

            mismatches = []
            for key in hash_results:
                if key in other_hashes and hash_results[key] != other_hashes[key]:
                    mismatches.append(key)

            if mismatches:
                print(f"[❌] MISMATCH with {fname}: {', '.join(mismatches)}")
            else:
                print(f"[✅] MATCH with {fname}")

if __name__ == "__main__":
    run_tests()
